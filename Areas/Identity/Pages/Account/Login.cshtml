@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
}

<style>
    .loader-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.85);
        z-index: 9999;
        align-items: center;
        justify-content: center;
    }

    .loader-container {
        width: 50%;
        text-align: center;
    }

    .loader-message {
        font-size: 1.45rem;
        font-weight: 500;
        margin-bottom: 1rem;
        color: #333;
    }

    .retry-button {
        margin-top: 1rem;
        display: none;
        font-size: 1rem;
    }
</style>

<h1 class="mt-4">@ViewData["Title"]</h1>
<!-- MyCycle Loading Overlay (shown during long fetches) -->
<div id="global-loader" class="loader-overlay">
    <div class="loader-container">

        <!-- Dynamic loading message -->
        <div id="loading-message" class="loader-message"></div>

        <!-- Progress bar -->
        <div class="progress">
            <div id="loader-progress-bar"
                 class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
                 role="progressbar"
                 style="width: 0%; height: 3rem;"
                 aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>

        <!-- Retry button (shown if fetch fails) -->
        <button id="retryBtn" onclick="retryLastFetch()" class="btn btn-outline-danger retry-button">Try Again</button>

        <!-- Spacer for layout breathing room -->
        <br />
        <br />
        <br />
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <section>
            <form id="account" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email" class="form-label">Email</label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password" class="form-label">Password</label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="checkbox mb-3">
                    <label asp-for="Input.RememberMe" class="form-label">
                        <input class="form-check-input" asp-for="Input.RememberMe" />
                        @Html.DisplayNameFor(m => m.Input.RememberMe)
                    </label>
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-secondary">Log in</button>
                </div>

                <br />

                <div>
                    <p>
                        <a id="forgot-password" asp-page="./ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Register as a new user</a>
                    </p>
                    <p>
                        <a id="resend-confirmation" asp-page="./ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <div>
                <p>
                    <a asp-page="./ExternalLogin" asp-route-provider="Google" asp-route-returnUrl="@Model.ReturnUrl">
                       
                    </a>
                </p>
            </div>

            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const loginForm = document.getElementById('account');

                if (loginForm) {
                    loginForm.addEventListener('submit', (e) => {
                        const loader = document.getElementById('global-loader');
                        const statusText = document.getElementById('loading-message');
                        const progressBar = document.getElementById('loader-progress-bar');
                        const retryBtn = document.getElementById('retryBtn');

                        if (loader && statusText && retryBtn && progressBar) {
                            e.preventDefault(); // prevent immediate submission
                            retryBtn.style.display = "none";
                            statusText.textContent = "Waking up the server elves... please wait 🧝";
                            loader.style.display = "flex";

                            // Simulate progress bar
                            let progress = 0;
                            const interval = setInterval(() => {
                                if (progress < 90) {
                                    progress++;
                                    progressBar.style.width = progress + "%";
                                } else {
                                    clearInterval(interval);

                                    // Finish bar and submit after short delay
                                    progressBar.style.width = "100%";
                                    setTimeout(() => {
                                        loginForm.submit();
                                    }, 300); // optional: delay before actually submitting
                                }
                            }, 40);
                        }
                    });
                }
            });
    </script>
}

